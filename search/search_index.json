{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ready to Code? Find beginner programming tutorials right here! Learn how to code in python !","title":"Home"},{"location":"#ready-to-code","text":"Find beginner programming tutorials right here! Learn how to code in python !","title":"Ready to Code?"},{"location":"about/","text":"About Westview Arduino Club is a club meant to introduce students to programming and hardware. We hope to allow students to work on projects with each other in a manner that they may not have before; forming project ideas together, brainstorming solutions, and more. Here, regardless of whether you are experienced at programming and hardware or not, you'll be able to get help and give help to others in a safe, kind environment. Can I contribute? Sure! Submit a pull request here and follow the instructions listed in the README. The Poway Unified School District (PUSD) is an equal opportunity employer/program and is committed to an active Nondiscrimination Program. PUSD prohibits discrimination, harassment, intimidation, and bullying based on actual or perceived race, color, ancestry, national origin, nationality, immigration status, ethnicity, ethnic group identification, age, religion, marital or parental status, physical or mental ability, sex, sexual orientation, gender, gender identity, or gender expression or association with a person or a group with one or more of these actual or perceived characteristics. For more information, please contact: Title IX/Equity Compliance Officer, James Jimenez, Associate Superintendent of Personnel Support Services, Poway Unified School District, 15250 Avenue of Science, San Diego, CA 92128, 1-858-521-2800, extension 2761, jjimenez@powayusd.com","title":"About"},{"location":"about/#about","text":"Westview Arduino Club is a club meant to introduce students to programming and hardware. We hope to allow students to work on projects with each other in a manner that they may not have before; forming project ideas together, brainstorming solutions, and more. Here, regardless of whether you are experienced at programming and hardware or not, you'll be able to get help and give help to others in a safe, kind environment.","title":"About"},{"location":"about/#can-i-contribute","text":"Sure! Submit a pull request here and follow the instructions listed in the README. The Poway Unified School District (PUSD) is an equal opportunity employer/program and is committed to an active Nondiscrimination Program. PUSD prohibits discrimination, harassment, intimidation, and bullying based on actual or perceived race, color, ancestry, national origin, nationality, immigration status, ethnicity, ethnic group identification, age, religion, marital or parental status, physical or mental ability, sex, sexual orientation, gender, gender identity, or gender expression or association with a person or a group with one or more of these actual or perceived characteristics. For more information, please contact: Title IX/Equity Compliance Officer, James Jimenez, Associate Superintendent of Personnel Support Services, Poway Unified School District, 15250 Avenue of Science, San Diego, CA 92128, 1-858-521-2800, extension 2761, jjimenez@powayusd.com","title":"Can I contribute?"},{"location":"python-tutorials/Setup/","text":"Python Setup Learn the basics of python! How do I start? There are two popular ways to run python: on a browser, or locally on your computer. On a browser: We recommend CodeSkulptor because it is easy to use and has lots of available modules (you'll learn about that later!) If you don't like CodeSkulptor, simply look up \"web python ide\" and something good should pop up. On your computer (local): Install python3 Install an editor that can run python3 i.e. don't use the command line. VSCode with the python extension works well. What if I'm not in Arduino Club? Don't worry about it! Just have fun, and if you like this tutorial, \"star\" our project on github \ud83d\ude0a. Can I contribute? Sure! Submit a pull request here and follow the instructions listed in the README. Creators Sean Boerhout","title":"Setting up python"},{"location":"python-tutorials/Setup/#python-setup","text":"Learn the basics of python!","title":"Python Setup"},{"location":"python-tutorials/Setup/#how-do-i-start","text":"There are two popular ways to run python: on a browser, or locally on your computer. On a browser: We recommend CodeSkulptor because it is easy to use and has lots of available modules (you'll learn about that later!) If you don't like CodeSkulptor, simply look up \"web python ide\" and something good should pop up. On your computer (local): Install python3 Install an editor that can run python3 i.e. don't use the command line. VSCode with the python extension works well.","title":"How do I start?"},{"location":"python-tutorials/Setup/#what-if-im-not-in-arduino-club","text":"Don't worry about it! Just have fun, and if you like this tutorial, \"star\" our project on github \ud83d\ude0a.","title":"What if I'm not in Arduino Club?"},{"location":"python-tutorials/Setup/#can-i-contribute","text":"Sure! Submit a pull request here and follow the instructions listed in the README.","title":"Can I contribute?"},{"location":"python-tutorials/Setup/#creators","text":"Sean Boerhout","title":"Creators"},{"location":"python-tutorials/lesson1/","text":"The Basics Created by: Sean Boerhout Variables and Data Types So where do we start? Well, nearly all programming involves variables , or snippets of memory in your computer that holds some data. Say I wanted to take user input, or record the number of times someone pressed a button. You'd need variables to do this! Let's start with a simple example: the number of minecraft worlds I have on my computer to date, which is 27. minecraft_world_count = 27 Here, minecraft_world_count is my variable, and it holds a number (an integer to be exact). Different types of data need to be held with different types of variables; for example, 1.1 isn't an integer anymore, it's a rational number (in coding terms, a floating-point number). Another cool thing in python is that you can easily represent large numbers. Whenever you assign a number to a variable, you can't use commas to make it easily readable. For example, myNumber = 100 , 000 Will actually cause python to think that your number is of type tuple , which is a data type that doesn't allow you to change its value. To tell python that the number is still an integer you can do this: my_number = 100_00 Printing Now, suppose I wanted to print the value of a variable as an output. Python has a useful function called print() for this, so print ( myNumber ) will output 100000 . If I wanted to combine a string with the number, all you need to do is pass another argument (what print() will print) to print() . print ( \"My number is \" , myNumber ) Output: My number is 100000 One more thing: what if we wanted to format a string into different parts i.e. number here, string there without using commas? Python allows us to do this super easily too: print ( f \"My number is { myNumber } \" ) Output: My number is 100000 Python recognizes that you wanted a formatted string by prefixing the string with an f . Then you can use curly braces to say where you want the number! (You'll see how awesome this is in future lessons). Strings Say I wanted to give my favorite world a name, and hold that name in a variable. I could do it like this: minecraft_world_name = \"Zombie manhunt\" And in this case, the variable would be of type string . In python, strings are neat because you can add characters to them like this: my_name = \"Bill\" my_full_name = my_name + \" Mitchell\" print ( my_full_name ) Output: Bill Mitchell There are also some cool methods to modify strings: upper() Makes a string uppercase rock = \"let's rock\" print ( rock . upper ()) Output: LET'S ROCK lower() Makes a string lowercase fruit = \"APPLES\" print ( fruit . lower ()) Output: apples title() Capitalizes a string my_name = \"bill mitchell\" print ( my_name . title ()) Output: Bill Mitchell Booleans One more example: suppose I wanted to say whether python is cool. I could use a boolean type variable: python_is_awesome = True Type Function If you ever want to know what the type of something is, then you can use a function called type() . This outputs the type of the variable: print ( type ( 1 )) print ( type ( 1.1 )) print ( type ( 1000000000 )) print ( type ( \"one\" )) print ( type ([ 1 , 2 , 3 , 4 ])) # Coming next lesson! Output: < type 'int' > < type 'float' > < type 'int' > < type 'str' > < type 'list' > Basic Arithmetic So... pure variables are boring - you've probably figured that out by now. Can we modify them? In fact, yes! And it's super easy. Whenever you modify a variable, python essentially overrides one of the variables. Say I just made a new minecraft world. To add another world, I'd just do: minecraft_world_count = minecraft_world_count + 1 Super easy! Since programmers use this kind of arithmetic very often, however, there is shorthand notation for this: minecraft_world_count += 1 += # variable = variable + increment -= # variable = variable - increment *= # variable = variable * increment /= # variable = variable / increment Commenting What if you have code and you want to write a description about it? Just writing next to it won't work because python will think that you're still trying to code. In this case, you can use comments . Simply prefix any words/sentences/phrases with a hashtag: # . For bulk commenting, you can use three quotes. Example: # My name is Zephyr: print ( \"My name is Zephyr!\" ) \"\"\" Do you like striders in minecraft? I do... they are fun, but could use more health. On a scale of 1-10, this is how much I like striders: \"\"\" print ( 7 )","title":"The Basics"},{"location":"python-tutorials/lesson1/#the-basics","text":"Created by: Sean Boerhout","title":"The Basics"},{"location":"python-tutorials/lesson1/#variables-and-data-types","text":"So where do we start? Well, nearly all programming involves variables , or snippets of memory in your computer that holds some data. Say I wanted to take user input, or record the number of times someone pressed a button. You'd need variables to do this! Let's start with a simple example: the number of minecraft worlds I have on my computer to date, which is 27. minecraft_world_count = 27 Here, minecraft_world_count is my variable, and it holds a number (an integer to be exact). Different types of data need to be held with different types of variables; for example, 1.1 isn't an integer anymore, it's a rational number (in coding terms, a floating-point number). Another cool thing in python is that you can easily represent large numbers. Whenever you assign a number to a variable, you can't use commas to make it easily readable. For example, myNumber = 100 , 000 Will actually cause python to think that your number is of type tuple , which is a data type that doesn't allow you to change its value. To tell python that the number is still an integer you can do this: my_number = 100_00","title":"Variables and Data Types"},{"location":"python-tutorials/lesson1/#printing","text":"Now, suppose I wanted to print the value of a variable as an output. Python has a useful function called print() for this, so print ( myNumber ) will output 100000 . If I wanted to combine a string with the number, all you need to do is pass another argument (what print() will print) to print() . print ( \"My number is \" , myNumber ) Output: My number is 100000 One more thing: what if we wanted to format a string into different parts i.e. number here, string there without using commas? Python allows us to do this super easily too: print ( f \"My number is { myNumber } \" ) Output: My number is 100000 Python recognizes that you wanted a formatted string by prefixing the string with an f . Then you can use curly braces to say where you want the number! (You'll see how awesome this is in future lessons).","title":"Printing"},{"location":"python-tutorials/lesson1/#strings","text":"Say I wanted to give my favorite world a name, and hold that name in a variable. I could do it like this: minecraft_world_name = \"Zombie manhunt\" And in this case, the variable would be of type string . In python, strings are neat because you can add characters to them like this: my_name = \"Bill\" my_full_name = my_name + \" Mitchell\" print ( my_full_name ) Output: Bill Mitchell There are also some cool methods to modify strings: upper() Makes a string uppercase rock = \"let's rock\" print ( rock . upper ()) Output: LET'S ROCK lower() Makes a string lowercase fruit = \"APPLES\" print ( fruit . lower ()) Output: apples title() Capitalizes a string my_name = \"bill mitchell\" print ( my_name . title ()) Output: Bill Mitchell","title":"Strings"},{"location":"python-tutorials/lesson1/#booleans","text":"One more example: suppose I wanted to say whether python is cool. I could use a boolean type variable: python_is_awesome = True","title":"Booleans"},{"location":"python-tutorials/lesson1/#type-function","text":"If you ever want to know what the type of something is, then you can use a function called type() . This outputs the type of the variable: print ( type ( 1 )) print ( type ( 1.1 )) print ( type ( 1000000000 )) print ( type ( \"one\" )) print ( type ([ 1 , 2 , 3 , 4 ])) # Coming next lesson! Output: < type 'int' > < type 'float' > < type 'int' > < type 'str' > < type 'list' >","title":"Type Function"},{"location":"python-tutorials/lesson1/#basic-arithmetic","text":"So... pure variables are boring - you've probably figured that out by now. Can we modify them? In fact, yes! And it's super easy. Whenever you modify a variable, python essentially overrides one of the variables. Say I just made a new minecraft world. To add another world, I'd just do: minecraft_world_count = minecraft_world_count + 1 Super easy! Since programmers use this kind of arithmetic very often, however, there is shorthand notation for this: minecraft_world_count += 1 += # variable = variable + increment -= # variable = variable - increment *= # variable = variable * increment /= # variable = variable / increment","title":"Basic Arithmetic"},{"location":"python-tutorials/lesson1/#commenting","text":"What if you have code and you want to write a description about it? Just writing next to it won't work because python will think that you're still trying to code. In this case, you can use comments . Simply prefix any words/sentences/phrases with a hashtag: # . For bulk commenting, you can use three quotes. Example: # My name is Zephyr: print ( \"My name is Zephyr!\" ) \"\"\" Do you like striders in minecraft? I do... they are fun, but could use more health. On a scale of 1-10, this is how much I like striders: \"\"\" print ( 7 )","title":"Commenting"},{"location":"python-tutorials/lesson2/","text":"Lists, Sets, Dictionaries, and Tuples Created By: Sean Boerhout Lists We've already learned about variables, which allow us to store data in different chunks of memory. But what if there are a whole bunch of varaibles that are actually related to each other? Suppose I wanted to list my favorite animals. I could do it like this: my_favorite_animal1 = \"Tiger\" my_favorite_animal2 = \"Turtle\" my_favorite_animal3 = \"Elephant\" my_favorite_animal4 = \"Dolphin\" But this isn't very nice; the variables are essentially all the same, except holding my next favorite animal. To make this more readable, we can use a list . my_favorite_animals = [ \"Tiger\" , \"Turtle\" , \"Elephant\" , \"Dolphin\" ] # ^ You must use brackets ^ The cool thing about this is that there is no need to have a bunch of variables, because all the data is essentially held in one. Indexing But how do I get each variable out? For that, we need to talk about index . The index of one of each item in a list is where it lies in the list. It's super simple; the first item in the list has an index of 0, and the rest have an index of 1 + (previous index). For the example above, \"Tiger\" has an index of 0, \"Turtle\" has an index of 1, etc. my_most_favorite_animal = my_favorite_animals [ 0 ] # Tigers print ( my_most_favorite_animal ) Output: Tiger You can also use a negative number as an index... what do you think this means? my_least_favorite_animal = my_favorite_animals [ - 1 ] print ( my_least_favorite_animal ) Output: Dolphin That's right! Negative numbers start form the back of the list. We can also use colons, to specify a range: print ( my_favorite_animals [:]) print ( my_favorite_animals [ 0 : 3 ]) print ( my_favorite_animals [ 1 :]) print ( my_favorite_animals [: 3 ]) print ( my_favorite_animals [: - 1 ]) Output: [ 'Tiger' , 'Turtle' , 'Elephant' , 'Dolphin' ] [ 'Tiger' , 'Turtle' , 'Elephant' ] [ 'Turtle' , 'Elephant' , 'Dolphin' ] [ 'Tiger' , 'Turtle' , 'Elephant' ] [ 'Tiger' , 'Turtle' , 'Elephant' ] Each number on the sides of the colon specify the start/endpoints of the range of numbers. The number in front of the colon will always be included, the number behind the colon won't be included (but the number before it will). Modifying Elements Like normal variables, you can also override certain elements in a list: my_favorite_animals = [ \"Tiger\" , \"Turtle\" , \"Elephant\" , \"Dolphin\" ] # original my_favorite_animals [ 0 ] = \"blue whale\" print ( my_favorite_animals ) Output: [ 'blue whale' , 'Turtle' , 'Elephant' , 'Dolphin' ] And you can do basic arithmetic with them too! Strings print ( \"My favorite animal is \" + my_favorite_animals [ 0 ]) Output: My favorite animal is blue whale Numbers bananas_every_day = [ 2 , 1 , 1 , 3 , 2 , 5 , 6 ] print ( \"I ate \" , bananas_every_day [ 1 ] + bananas_every_day [ 2 ], \" bananas on Monday and Tuesday\" ) Output: I ate 2 bananas on Monday and Tuesday Useful Methods There are also some cool methods that can be used to modify lists: append() Adds an element to the end of a list my_favorite_animals . append ( \"Hyena\" ) print ( my_favorite_animals ) Output: [ 'Tiger' , 'Turtle' , 'Elephant' , 'Dolphin' , 'Hyena' ] pop() removes an element from a list and returns its output print ( my_favorite_animals . pop ( 0 )) # remove Tiger print ( my_favorite_animals ) Output: Tiger [ 'Turtle' , 'Elephant' , 'Dolphin' , 'hyena' ] insert() Allows you to insert a value at a specified index fruits = [ \"apples\" , \"oranges\" , \"lemons\" ] fruits . insert ( 0 , \"grapes\" ) print ( fruits ) Output: [ 'grapes' , 'apples' , 'oranges' , 'lemons' ] Multi-dimensional lists You can also put lists in other lists: my_favorite_ocean_animals = [ \"Tiger Shark\" , \"Sea Turtle\" , \"Dolphin\" ] my_favorite_animals = [ my_favorite_ocean_animals , \"Tortoise\" , \"Elephant\" ] print ( my_favorite_animals ) Output: [[ 'Tiger Shark' , 'Sea Turtle' , 'Dolphin' ], 'Tortoise' , 'Elephant' ] And access elements inside the list inside the list print ( \"My favorite sea creature is \" , my_favorite_animals [ 0 ][ 0 ]) Output: Tiger Shark Sets Sets are just like lists, but have three main exceptions: Every element must be unique They don't preserve their order No indexing (since they have no order!) Let's compare them with some examples. making_cereal_list = [ \"Put cereal in bowl\" , \"Put milk in bowl\" , \"Eat!\" ] # This is a list making_cereal_set = { \"Put cereal in bowl\" , \"Put milk in bowl\" , \"Eat!\" } # This is a set # ^ Sets use curly braces ^ print ( making_cereal_list ) print ( making_cereal_set ) Output: [ 'Put cereal in bowl' , 'Put milk in bowl' , 'Eat!' ] { 'Eat!' , 'Put cereal in bowl' , 'Put milk in bowl' } What? Eat the cereal before putting it in your bowl? That doesn't makes sense! Let's see how sets stay unique: making_cereal_list = [ \"Put cereal in bowl\" , \"Put milk in bowl\" , \"Eat!\" , \"Eat!\" , \"Eat!\" ] # This is a list making_cereal_set = { \"Put cereal in bowl\" , \"Put milk in bowl\" , \"Eat!\" , \"Eat!\" , \"Eat!\" } # This is a list print ( making_cereal_list ) print ( making_cereal_set ) Output: [ 'Put cereal in bowl' , 'Put milk in bowl' , 'Eat!' , 'Eat!' , 'Eat!' ] { 'Eat!' , 'Put milk in bowl' , 'Put cereal in bowl' } As you can see, there is only one \"Eat!\" in the set, but three in the list. Useful Methods Here are the counterparts to append() and pop() but for sets: add() Adds an element to a set (no particular order) candy_types = { \"Twix\" , \"Airhead\" , \"Kit Kat\" } candy_types . add ( \"Skittles\" ) Output: { 'Twix' , 'Kit Kat' , 'Skittles' , 'Airhead' } remove() removes an element from a set candy_types = { \"Twix\" , \"Airhead\" , \"Kit Kat\" } candy_types . remove ( \"Twix\" ) Output: { 'Kit Kat' , 'Airhead' } Dictionaries Dictionaries are like lists with some extra features. They allow you to associate a name to a value in a structured manner: about_me = { 'name' : 'Zephyr' , 'food' : 'fish' , 'siblings' : 5 , 'species' : 'cat' } print ( about_me ) print ( about_me [ 'name' ]) print ( about_me [ 'siblings' ]) Output: {'species': 'cat', 'food': 'fish', 'siblings': 5, 'name': 'Zephyr'} Zephyr 5 This can make your code more easy to understand because the index of an element has a custom name. If you wanted to, however, you could make the key of an element (the name denoted to its index) a number: size_chart = { 1 : 5 2 : 10 } print ( size_chart [ 1 ]) Output: 5 Modifying dictionaries Here are the counterparts to append() and pop() but for dictionaries: Adding data In dictionaries, it is super easy to add data! Just make a new key with its own value: cookies = { \"smell\" : \"delicious\" , \"type\" : \"Chocolate\" } cookies [ \"taste\" ] = \"amazing\" print ( cookies ) Output: { 'type' : 'Chocolate' , 'smell' : 'delicious' , 'taste' : 'amazing' } del deletes a key and value from a dictionary pies = { \"apple\" : \"good\" , \"pumpkin\" : \"terrible\" } del pies [ \"pumpkin\" ] print ( pies ) Output: { 'apple' : 'good' } Useful methods keys() returns all the keys of a dictionary in the form of a list course = { \"language\" : \"python\" , \"students\" : 100_000 , \"Instructor\" : \"WV Arduino Club\" } keys = course . keys () print ( keys ) Output: dict_keys ([ 'language' , 'Instructor' , 'students' ]) values() returns all the values of a dictionary in the form of a list course = { \"language\" : \"python\" , \"students\" : 100_000 , \"Instructor\" : \"WV Arduino Club\" } values = course . values () print ( values ) Output: dict_values ([ 'python' , 'WV Arduino Club' , 100000 ]) items() returns the items of the dictionary as a list You can use a for loop to access the list as such: course = { \"language\" : \"python\" , \"Instructor\" : \"WV Arduino Club\" } for key , values in course . items (): print ( f \"The course { key } is { value } \" ) Output: The course Instructor is WV Arduino Club The course language is python Tuples Tuples are nearly axactly like a list, but they can't be modified. Like lists, they also mainting their order (Sets don't!). Also, indexing works exactly the same way: chemistry_consts = ( 6.022 , 2.998 , 6.626 ) # ^ Tuples use parens ^ print ( chemistry_consts [ 0 ]) Output: 6.022 As mentioned, you can't modify them: chemistry_consts = ( 6.022 , 2.998 , 6.626 ) chemistry_consts . append ( 8.314 ) Output: Line 2 : AttributeError : 'tuple' object has no attribute 'append' That's an error! The append() method doesn't exist for tuples! Instead, we can create new tuples that have the elements we want from old tuples. chemistry_consts = ( 6.022 , 2.998 , 6.626 ) updated_chemistry_consts = chemistry_consts [ 0 : 2 ] print ( updated_chemistry_consts ) Output: (6.022, 2.998) Useful methods What can we do to tuples? count() returns number of times a value is in a certain tuple chemistry_consts = ( 6.022 , 2.998 , 6.626 , 2.998 ) print ( chemistry_consts . count ( 2.998 )) print ( chemistry_consts . count ( 6.022 )) Output: 2 1 index() returns index of a the first instance of a certain item in the tuple chemistry_consts = ( 6.022 , 2.998 , 6.626 , 2.998 ) print ( chemistry_consts . index ( 2.998 )) print ( chemistry_consts . index ( 6.022 )) Output: 1 0","title":"Lists, Sets, Dictionaries, and Tuples"},{"location":"python-tutorials/lesson2/#lists-sets-dictionaries-and-tuples","text":"Created By: Sean Boerhout","title":"Lists, Sets, Dictionaries, and Tuples"},{"location":"python-tutorials/lesson2/#lists","text":"We've already learned about variables, which allow us to store data in different chunks of memory. But what if there are a whole bunch of varaibles that are actually related to each other? Suppose I wanted to list my favorite animals. I could do it like this: my_favorite_animal1 = \"Tiger\" my_favorite_animal2 = \"Turtle\" my_favorite_animal3 = \"Elephant\" my_favorite_animal4 = \"Dolphin\" But this isn't very nice; the variables are essentially all the same, except holding my next favorite animal. To make this more readable, we can use a list . my_favorite_animals = [ \"Tiger\" , \"Turtle\" , \"Elephant\" , \"Dolphin\" ] # ^ You must use brackets ^ The cool thing about this is that there is no need to have a bunch of variables, because all the data is essentially held in one.","title":"Lists"},{"location":"python-tutorials/lesson2/#indexing","text":"But how do I get each variable out? For that, we need to talk about index . The index of one of each item in a list is where it lies in the list. It's super simple; the first item in the list has an index of 0, and the rest have an index of 1 + (previous index). For the example above, \"Tiger\" has an index of 0, \"Turtle\" has an index of 1, etc. my_most_favorite_animal = my_favorite_animals [ 0 ] # Tigers print ( my_most_favorite_animal ) Output: Tiger You can also use a negative number as an index... what do you think this means? my_least_favorite_animal = my_favorite_animals [ - 1 ] print ( my_least_favorite_animal ) Output: Dolphin That's right! Negative numbers start form the back of the list. We can also use colons, to specify a range: print ( my_favorite_animals [:]) print ( my_favorite_animals [ 0 : 3 ]) print ( my_favorite_animals [ 1 :]) print ( my_favorite_animals [: 3 ]) print ( my_favorite_animals [: - 1 ]) Output: [ 'Tiger' , 'Turtle' , 'Elephant' , 'Dolphin' ] [ 'Tiger' , 'Turtle' , 'Elephant' ] [ 'Turtle' , 'Elephant' , 'Dolphin' ] [ 'Tiger' , 'Turtle' , 'Elephant' ] [ 'Tiger' , 'Turtle' , 'Elephant' ] Each number on the sides of the colon specify the start/endpoints of the range of numbers. The number in front of the colon will always be included, the number behind the colon won't be included (but the number before it will).","title":"Indexing"},{"location":"python-tutorials/lesson2/#modifying-elements","text":"Like normal variables, you can also override certain elements in a list: my_favorite_animals = [ \"Tiger\" , \"Turtle\" , \"Elephant\" , \"Dolphin\" ] # original my_favorite_animals [ 0 ] = \"blue whale\" print ( my_favorite_animals ) Output: [ 'blue whale' , 'Turtle' , 'Elephant' , 'Dolphin' ] And you can do basic arithmetic with them too! Strings print ( \"My favorite animal is \" + my_favorite_animals [ 0 ]) Output: My favorite animal is blue whale Numbers bananas_every_day = [ 2 , 1 , 1 , 3 , 2 , 5 , 6 ] print ( \"I ate \" , bananas_every_day [ 1 ] + bananas_every_day [ 2 ], \" bananas on Monday and Tuesday\" ) Output: I ate 2 bananas on Monday and Tuesday","title":"Modifying Elements"},{"location":"python-tutorials/lesson2/#useful-methods","text":"There are also some cool methods that can be used to modify lists: append() Adds an element to the end of a list my_favorite_animals . append ( \"Hyena\" ) print ( my_favorite_animals ) Output: [ 'Tiger' , 'Turtle' , 'Elephant' , 'Dolphin' , 'Hyena' ] pop() removes an element from a list and returns its output print ( my_favorite_animals . pop ( 0 )) # remove Tiger print ( my_favorite_animals ) Output: Tiger [ 'Turtle' , 'Elephant' , 'Dolphin' , 'hyena' ] insert() Allows you to insert a value at a specified index fruits = [ \"apples\" , \"oranges\" , \"lemons\" ] fruits . insert ( 0 , \"grapes\" ) print ( fruits ) Output: [ 'grapes' , 'apples' , 'oranges' , 'lemons' ]","title":"Useful Methods"},{"location":"python-tutorials/lesson2/#multi-dimensional-lists","text":"You can also put lists in other lists: my_favorite_ocean_animals = [ \"Tiger Shark\" , \"Sea Turtle\" , \"Dolphin\" ] my_favorite_animals = [ my_favorite_ocean_animals , \"Tortoise\" , \"Elephant\" ] print ( my_favorite_animals ) Output: [[ 'Tiger Shark' , 'Sea Turtle' , 'Dolphin' ], 'Tortoise' , 'Elephant' ] And access elements inside the list inside the list print ( \"My favorite sea creature is \" , my_favorite_animals [ 0 ][ 0 ]) Output: Tiger Shark","title":"Multi-dimensional lists"},{"location":"python-tutorials/lesson2/#sets","text":"Sets are just like lists, but have three main exceptions: Every element must be unique They don't preserve their order No indexing (since they have no order!) Let's compare them with some examples. making_cereal_list = [ \"Put cereal in bowl\" , \"Put milk in bowl\" , \"Eat!\" ] # This is a list making_cereal_set = { \"Put cereal in bowl\" , \"Put milk in bowl\" , \"Eat!\" } # This is a set # ^ Sets use curly braces ^ print ( making_cereal_list ) print ( making_cereal_set ) Output: [ 'Put cereal in bowl' , 'Put milk in bowl' , 'Eat!' ] { 'Eat!' , 'Put cereal in bowl' , 'Put milk in bowl' } What? Eat the cereal before putting it in your bowl? That doesn't makes sense! Let's see how sets stay unique: making_cereal_list = [ \"Put cereal in bowl\" , \"Put milk in bowl\" , \"Eat!\" , \"Eat!\" , \"Eat!\" ] # This is a list making_cereal_set = { \"Put cereal in bowl\" , \"Put milk in bowl\" , \"Eat!\" , \"Eat!\" , \"Eat!\" } # This is a list print ( making_cereal_list ) print ( making_cereal_set ) Output: [ 'Put cereal in bowl' , 'Put milk in bowl' , 'Eat!' , 'Eat!' , 'Eat!' ] { 'Eat!' , 'Put milk in bowl' , 'Put cereal in bowl' } As you can see, there is only one \"Eat!\" in the set, but three in the list.","title":"Sets"},{"location":"python-tutorials/lesson2/#useful-methods_1","text":"Here are the counterparts to append() and pop() but for sets: add() Adds an element to a set (no particular order) candy_types = { \"Twix\" , \"Airhead\" , \"Kit Kat\" } candy_types . add ( \"Skittles\" ) Output: { 'Twix' , 'Kit Kat' , 'Skittles' , 'Airhead' } remove() removes an element from a set candy_types = { \"Twix\" , \"Airhead\" , \"Kit Kat\" } candy_types . remove ( \"Twix\" ) Output: { 'Kit Kat' , 'Airhead' }","title":"Useful Methods"},{"location":"python-tutorials/lesson2/#dictionaries","text":"Dictionaries are like lists with some extra features. They allow you to associate a name to a value in a structured manner: about_me = { 'name' : 'Zephyr' , 'food' : 'fish' , 'siblings' : 5 , 'species' : 'cat' } print ( about_me ) print ( about_me [ 'name' ]) print ( about_me [ 'siblings' ]) Output: {'species': 'cat', 'food': 'fish', 'siblings': 5, 'name': 'Zephyr'} Zephyr 5 This can make your code more easy to understand because the index of an element has a custom name. If you wanted to, however, you could make the key of an element (the name denoted to its index) a number: size_chart = { 1 : 5 2 : 10 } print ( size_chart [ 1 ]) Output: 5","title":"Dictionaries"},{"location":"python-tutorials/lesson2/#modifying-dictionaries","text":"Here are the counterparts to append() and pop() but for dictionaries: Adding data In dictionaries, it is super easy to add data! Just make a new key with its own value: cookies = { \"smell\" : \"delicious\" , \"type\" : \"Chocolate\" } cookies [ \"taste\" ] = \"amazing\" print ( cookies ) Output: { 'type' : 'Chocolate' , 'smell' : 'delicious' , 'taste' : 'amazing' } del deletes a key and value from a dictionary pies = { \"apple\" : \"good\" , \"pumpkin\" : \"terrible\" } del pies [ \"pumpkin\" ] print ( pies ) Output: { 'apple' : 'good' }","title":"Modifying dictionaries"},{"location":"python-tutorials/lesson2/#useful-methods_2","text":"keys() returns all the keys of a dictionary in the form of a list course = { \"language\" : \"python\" , \"students\" : 100_000 , \"Instructor\" : \"WV Arduino Club\" } keys = course . keys () print ( keys ) Output: dict_keys ([ 'language' , 'Instructor' , 'students' ]) values() returns all the values of a dictionary in the form of a list course = { \"language\" : \"python\" , \"students\" : 100_000 , \"Instructor\" : \"WV Arduino Club\" } values = course . values () print ( values ) Output: dict_values ([ 'python' , 'WV Arduino Club' , 100000 ]) items() returns the items of the dictionary as a list You can use a for loop to access the list as such: course = { \"language\" : \"python\" , \"Instructor\" : \"WV Arduino Club\" } for key , values in course . items (): print ( f \"The course { key } is { value } \" ) Output: The course Instructor is WV Arduino Club The course language is python","title":"Useful methods"},{"location":"python-tutorials/lesson2/#tuples","text":"Tuples are nearly axactly like a list, but they can't be modified. Like lists, they also mainting their order (Sets don't!). Also, indexing works exactly the same way: chemistry_consts = ( 6.022 , 2.998 , 6.626 ) # ^ Tuples use parens ^ print ( chemistry_consts [ 0 ]) Output: 6.022 As mentioned, you can't modify them: chemistry_consts = ( 6.022 , 2.998 , 6.626 ) chemistry_consts . append ( 8.314 ) Output: Line 2 : AttributeError : 'tuple' object has no attribute 'append' That's an error! The append() method doesn't exist for tuples! Instead, we can create new tuples that have the elements we want from old tuples. chemistry_consts = ( 6.022 , 2.998 , 6.626 ) updated_chemistry_consts = chemistry_consts [ 0 : 2 ] print ( updated_chemistry_consts ) Output: (6.022, 2.998)","title":"Tuples"},{"location":"python-tutorials/lesson2/#useful-methods_3","text":"What can we do to tuples? count() returns number of times a value is in a certain tuple chemistry_consts = ( 6.022 , 2.998 , 6.626 , 2.998 ) print ( chemistry_consts . count ( 2.998 )) print ( chemistry_consts . count ( 6.022 )) Output: 2 1 index() returns index of a the first instance of a certain item in the tuple chemistry_consts = ( 6.022 , 2.998 , 6.626 , 2.998 ) print ( chemistry_consts . index ( 2.998 )) print ( chemistry_consts . index ( 6.022 )) Output: 1 0","title":"Useful methods"},{"location":"python-tutorials/lesson3/","text":"A Quick Recap Created by: Sean Boerhout Here I'll give you a quick recap of what you've learned in the form of an example. Suppose I wanted user input at a vending machine, where customers need to type in the drink that they want. Using a dictionary, I can easily relate the name of that drink to a price: drink_prices = { \"sprite\" : 2.50 , \"coke\" : 2.00 , \"fanta\" : 3.00 } In order to get the user's input, I'll use a cool function called input() . It prompts python to ask for your input and assigns the input to a string: customer_drink = input () Now we can ask someone for their desired drink and tell them the price! customer_drink = input () print ( drink_prices [ customer_drink ]) But we can do better than that... let's make the process more friendly with some print() s. print ( \"Welcome! What drink would you like? Please choose from one of the choices below:\" ) print ( drink_prices . keys ()) # ask them for their drink and say the price customer_drink = input () print ( f \" { customer_drink . title () } s costs { drink_prices [ customer_drink ] } dollars!\" ) But, wait. What if the user makes a typo by using the wrong capitalization? We can ensure that the input is always read correctly: customer_drink = input () . lower () Since all the keys in our dictionary are lowercase, this will fix that problem. Finished Code Here's all that code put together: drink_prices = { \"sprite\" : 2.50 , \"coke\" : 2.00 , \"fanta\" : 3.00 } print ( \"Welcome! What drink would you like? Please choose from one of the choices below:\" ) print ( drink_prices . keys ()) customer_drink = input () . lower () print ( f \" { customer_drink . title () } s costs { drink_prices [ customer_drink ] } dollars!\" ) Try it yourself Challenge Create a fictional character that a user can learn about! You should use at least one dictionary, one input, and one list. Here is an example:","title":"A quick recap"},{"location":"python-tutorials/lesson3/#a-quick-recap","text":"Created by: Sean Boerhout Here I'll give you a quick recap of what you've learned in the form of an example. Suppose I wanted user input at a vending machine, where customers need to type in the drink that they want. Using a dictionary, I can easily relate the name of that drink to a price: drink_prices = { \"sprite\" : 2.50 , \"coke\" : 2.00 , \"fanta\" : 3.00 } In order to get the user's input, I'll use a cool function called input() . It prompts python to ask for your input and assigns the input to a string: customer_drink = input () Now we can ask someone for their desired drink and tell them the price! customer_drink = input () print ( drink_prices [ customer_drink ]) But we can do better than that... let's make the process more friendly with some print() s. print ( \"Welcome! What drink would you like? Please choose from one of the choices below:\" ) print ( drink_prices . keys ()) # ask them for their drink and say the price customer_drink = input () print ( f \" { customer_drink . title () } s costs { drink_prices [ customer_drink ] } dollars!\" ) But, wait. What if the user makes a typo by using the wrong capitalization? We can ensure that the input is always read correctly: customer_drink = input () . lower () Since all the keys in our dictionary are lowercase, this will fix that problem.","title":"A Quick Recap"},{"location":"python-tutorials/lesson3/#finished-code","text":"Here's all that code put together: drink_prices = { \"sprite\" : 2.50 , \"coke\" : 2.00 , \"fanta\" : 3.00 } print ( \"Welcome! What drink would you like? Please choose from one of the choices below:\" ) print ( drink_prices . keys ()) customer_drink = input () . lower () print ( f \" { customer_drink . title () } s costs { drink_prices [ customer_drink ] } dollars!\" )","title":"Finished Code"},{"location":"python-tutorials/lesson3/#try-it-yourself","text":"","title":"Try it yourself"},{"location":"python-tutorials/lesson3/#challenge","text":"Create a fictional character that a user can learn about! You should use at least one dictionary, one input, and one list. Here is an example:","title":"Challenge"}]}