{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ready to Code? Find beginner programming tutorials right here! Learn how to code in python ! Brought to you by: Westview Arduino Club","title":"Home"},{"location":"#ready-to-code","text":"Find beginner programming tutorials right here! Learn how to code in python ! Brought to you by: Westview Arduino Club","title":"Ready to Code?"},{"location":"about/","text":"About Westview Arduino Club is a club meant to introduce students to programming and hardware. We hope to allow students to work on projects with each other in a manner that they may not have before; forming project ideas together, brainstorming solutions, and more. Here, regardless of whether you are experienced at programming and hardware or not, you'll be able to get help and give help to others in a safe, kind environment. Can I contribute? Sure! Submit a pull request here and follow the instructions listed in the README. The Poway Unified School District (PUSD) is an equal opportunity employer/program and is committed to an active Nondiscrimination Program. PUSD prohibits discrimination, harassment, intimidation, and bullying based on actual or perceived race, color, ancestry, national origin, nationality, immigration status, ethnicity, ethnic group identification, age, religion, marital or parental status, physical or mental ability, sex, sexual orientation, gender, gender identity, or gender expression or association with a person or a group with one or more of these actual or perceived characteristics. For more information, please contact: Title IX/Equity Compliance Officer, James Jimenez, Associate Superintendent of Personnel Support Services, Poway Unified School District, 15250 Avenue of Science, San Diego, CA 92128, 1-858-521-2800, extension 2761, jjimenez@powayusd.com","title":"About"},{"location":"about/#about","text":"Westview Arduino Club is a club meant to introduce students to programming and hardware. We hope to allow students to work on projects with each other in a manner that they may not have before; forming project ideas together, brainstorming solutions, and more. Here, regardless of whether you are experienced at programming and hardware or not, you'll be able to get help and give help to others in a safe, kind environment.","title":"About"},{"location":"about/#can-i-contribute","text":"Sure! Submit a pull request here and follow the instructions listed in the README. The Poway Unified School District (PUSD) is an equal opportunity employer/program and is committed to an active Nondiscrimination Program. PUSD prohibits discrimination, harassment, intimidation, and bullying based on actual or perceived race, color, ancestry, national origin, nationality, immigration status, ethnicity, ethnic group identification, age, religion, marital or parental status, physical or mental ability, sex, sexual orientation, gender, gender identity, or gender expression or association with a person or a group with one or more of these actual or perceived characteristics. For more information, please contact: Title IX/Equity Compliance Officer, James Jimenez, Associate Superintendent of Personnel Support Services, Poway Unified School District, 15250 Avenue of Science, San Diego, CA 92128, 1-858-521-2800, extension 2761, jjimenez@powayusd.com","title":"Can I contribute?"},{"location":"python-tutorials/Setup/","text":"Python Setup Learn the basics of python! How do I start? There are two popular ways to run python: on a browser, or locally on your computer. On a browser: We recommend CodeSkulptor because it is easy to use and has lots of available modules (you'll learn about that later!) If you don't like CodeSkulptor, simply look up \"web python ide\" and something good should pop up. On your computer (local): Install python3 Install an editor that can run python3 i.e. don't use the command line. VSCode with the python extension works well. What if I'm not in Arduino Club? Don't worry about it! Just have fun, and if you like this tutorial, \"star\" our project on github \ud83d\ude0a. Can I contribute? Sure! Submit a pull request here and follow the instructions listed in the README. Creators Sean Boerhout","title":"Setting up python"},{"location":"python-tutorials/Setup/#python-setup","text":"Learn the basics of python!","title":"Python Setup"},{"location":"python-tutorials/Setup/#how-do-i-start","text":"There are two popular ways to run python: on a browser, or locally on your computer. On a browser: We recommend CodeSkulptor because it is easy to use and has lots of available modules (you'll learn about that later!) If you don't like CodeSkulptor, simply look up \"web python ide\" and something good should pop up. On your computer (local): Install python3 Install an editor that can run python3 i.e. don't use the command line. VSCode with the python extension works well.","title":"How do I start?"},{"location":"python-tutorials/Setup/#what-if-im-not-in-arduino-club","text":"Don't worry about it! Just have fun, and if you like this tutorial, \"star\" our project on github \ud83d\ude0a.","title":"What if I'm not in Arduino Club?"},{"location":"python-tutorials/Setup/#can-i-contribute","text":"Sure! Submit a pull request here and follow the instructions listed in the README.","title":"Can I contribute?"},{"location":"python-tutorials/Setup/#creators","text":"Sean Boerhout","title":"Creators"},{"location":"python-tutorials/lesson1/","text":"The Basics Created by: Sean Boerhout Variables and Data Types So where do we start? Well, nearly all programming involves variables , or snippets of memory in your computer that holds some data. Say I wanted to take user input, or record the number of times someone pressed a button. You'd need variables to do this! Let's start with a simple example: the number of minecraft worlds I have on my computer to date, which is 27. minecraft_world_count = 27 Here, minecraft_world_count is my variable, and it holds a number (an integer to be exact). Different types of data need to be held with different types of variables; for example, 1.1 isn't an integer anymore, it's a rational number (in coding terms, a floating-point number). Another cool thing in python is that you can easily represent large numbers. Whenever you assign a number to a variable, you can't use commas to make it easily readable. For example, myNumber = 100,000 Will actually cause python to think that your number is of type tuple , which is a data type that doesn't allow you to change its value. To tell python that the number is still an integer you can do this: my_number = 100_00 Printing Now, suppose I wanted to print the value of a variable as an output. Python has a useful function called print() for this, so print(myNumber) will output 100000 . Say I wanted to give my favorite world a name, and hold that name in a variable. I could do it like this: minecraft_world_name = \"Zombie manhunt\" And in this case, the variable would be of type string . In python, strings are neat because you can add characters to them like this: my_name = \"Bill\" my_full_name = my_name + \" Mitchell\" print(my_full_name) Output: Sean Boerhout One more example: suppose I wanted to say whether python is cool. I could use a boolean type variable: python_is_awesome = True Basic Arithmetic So... pure variables are boring - you've probably figured that out by now. Can we modify them? In fact, yes! And it's super easy. Whenever you modify a variable, python essentially overrides one of the variables. Say I just made a new minecraft world. To add another world, I'd just do: minecraft_world_count = minecraft_world_count + 1 Super easy! Since programmers use this kind of arithmetic very often, however, there is shorthand notation for this: minecraft_world_count += 1 += # variable = variable + increment -= # variable = variable - increment *= # variable = variable * increment /= # variable = variable / increment Commenting What if you have code and you want to write a description about it? Just writing next to it won't work because python will think that you're still trying to code. In this case, you can use comments . Simply prefix any words/sentences/phrases with a hashtag: # . For bulk commenting, you can use three quotes. Example: # My name is Zephyr: print(\"My name is Zephyr!\") \"\"\" Do you like striders in minecraft? I do... they are fun, but could use more health. On a scale of 1-10, this is how much I like striders: \"\"\" print(7)","title":"The Basics"},{"location":"python-tutorials/lesson1/#the-basics","text":"Created by: Sean Boerhout","title":"The Basics"},{"location":"python-tutorials/lesson1/#variables-and-data-types","text":"So where do we start? Well, nearly all programming involves variables , or snippets of memory in your computer that holds some data. Say I wanted to take user input, or record the number of times someone pressed a button. You'd need variables to do this! Let's start with a simple example: the number of minecraft worlds I have on my computer to date, which is 27. minecraft_world_count = 27 Here, minecraft_world_count is my variable, and it holds a number (an integer to be exact). Different types of data need to be held with different types of variables; for example, 1.1 isn't an integer anymore, it's a rational number (in coding terms, a floating-point number). Another cool thing in python is that you can easily represent large numbers. Whenever you assign a number to a variable, you can't use commas to make it easily readable. For example, myNumber = 100,000 Will actually cause python to think that your number is of type tuple , which is a data type that doesn't allow you to change its value. To tell python that the number is still an integer you can do this: my_number = 100_00","title":"Variables and Data Types"},{"location":"python-tutorials/lesson1/#printing","text":"Now, suppose I wanted to print the value of a variable as an output. Python has a useful function called print() for this, so print(myNumber) will output 100000 . Say I wanted to give my favorite world a name, and hold that name in a variable. I could do it like this: minecraft_world_name = \"Zombie manhunt\" And in this case, the variable would be of type string . In python, strings are neat because you can add characters to them like this: my_name = \"Bill\" my_full_name = my_name + \" Mitchell\" print(my_full_name) Output: Sean Boerhout One more example: suppose I wanted to say whether python is cool. I could use a boolean type variable: python_is_awesome = True","title":"Printing"},{"location":"python-tutorials/lesson1/#basic-arithmetic","text":"So... pure variables are boring - you've probably figured that out by now. Can we modify them? In fact, yes! And it's super easy. Whenever you modify a variable, python essentially overrides one of the variables. Say I just made a new minecraft world. To add another world, I'd just do: minecraft_world_count = minecraft_world_count + 1 Super easy! Since programmers use this kind of arithmetic very often, however, there is shorthand notation for this: minecraft_world_count += 1 += # variable = variable + increment -= # variable = variable - increment *= # variable = variable * increment /= # variable = variable / increment","title":"Basic Arithmetic"},{"location":"python-tutorials/lesson1/#commenting","text":"What if you have code and you want to write a description about it? Just writing next to it won't work because python will think that you're still trying to code. In this case, you can use comments . Simply prefix any words/sentences/phrases with a hashtag: # . For bulk commenting, you can use three quotes. Example: # My name is Zephyr: print(\"My name is Zephyr!\") \"\"\" Do you like striders in minecraft? I do... they are fun, but could use more health. On a scale of 1-10, this is how much I like striders: \"\"\" print(7)","title":"Commenting"},{"location":"python-tutorials/lesson2/","text":"","title":"Lists, Sets, Dictionaries, and Tuples"}]}